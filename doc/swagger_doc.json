{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger Petstore - OpenAPI 3.0",
    "description": "RailRoad ltd is a company which aim to produce the best experience for your local and national commute.",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Everything about your auth with JWT",
      "externalDocs": {
        "description": "Find out more about JWT",
        "url": "https://developer.token.io/token_rest_api_doc/content/e-rest/jwt_auth.htm"
      }
    }
  ],
  "paths": {
    "/api/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "example@test.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiJ9.NjcwNzhjNjY1NjM1MjcwYjE5ZGYyZDc1.KE8ZEfiptQ47O6ptqWRqagQoRS_FTWi_lBObh563X3Y"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/WrongCredentials"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/api/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register / Create a new User",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "example@test.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  },
                  "pseudo": {
                    "type": "string",
                    "example": "Example"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/DataValidationError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JWTError"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "422": {
            "$ref": "#/components/responses/DataValidationError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User's informations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JWTError"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "422": {
            "$ref": "#/components/responses/DataValidationError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/JWTError"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "422": {
            "$ref": "#/components/responses/DataValidationError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/uploads": {
      "post": {
        "tags": [
          "Upload"
        ],
        "summary": "Upload File | jpeg, png, webp",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JWTError"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "422": {
            "$ref": "#/components/responses/DataValidationError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/uploads/{id}": {
      "get": {
        "tags": [
          "Upload"
        ],
        "summary": "Download a file's binary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the File",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "422": {
            "$ref": "#/components/responses/DataValidationError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Upload"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the File",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JWTError"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "422": {
            "$ref": "#/components/responses/DataValidationError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    }
  },
  "components": {
    "responses": {
      "UnknownEntity": {
        "description": "Unknown Entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "WrongCredentials": {
        "description": "Wrong Credentials",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "DataValidationError": {
        "description": "Data Validation Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServerError": {
        "description": "Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "JWTError": {
        "description": "JWT Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "ObjectId": {
        "type": "string",
        "example": "670aac033724678002d19064"
      },
      "UUID": {
        "type": "string",
        "example": "22710f9e-c139-48e7-9d0e-0e485bca36e4",
        "description": "RFC 4122 version 4 UUID. The UUID is generated using a cryptographic pseudorandom number generator."
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "pseudo": {
            "type": "string",
            "example": "UserName"
          },
          "email": {
            "type": "string",
            "example": "example@test.com"
          },
          "role": {
            "type": "string",
            "example": "client",
            "enum": [
              "admin",
              "employee",
              "client"
            ]
          }
        }
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "train": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "user": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          },
          "booktime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "mimetype": {
            "type": "string",
            "example": "image/png"
          },
          "filename": {
            "type": "string",
            "example": "test.png"
          },
          "upload_time": {
            "type": "string",
            "format": "date-time"
          },
          "buffer": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Unknown Entity",
            "enum": [
              "Data Validation",
              "Database Error",
              "Identifier Param is malformed in URL",
              "Unknown Entity",
              "Wrong Credentials",
              "Missing Authorization Header",
              "Jwt Error",
              "Unauthorized",
              "File type not allowed",
              "Used Elsewhere",
              "Image Processing Error"
            ]
          },
          "message": {
            "type": "string",
            "example": "This entity doesn't exist"
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}